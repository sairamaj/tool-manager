@page "/"

<h1>Tool Manager</h1>

@using ToolManager.Shared
@inject HttpClient Http
@inject IJSRuntime JSRuntime


@if (tools == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Blazor Download File</h1>

    <MatAccordion Multi="true">
            @foreach (var tool in tools)
            {
                <MatExpansionPanel>
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>@tool.Name</MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                    <div class="mat-layout-grid">
                        <div class="mat-layout-grid-inner">
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">

                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                            <MatButton Raised="true" OnClick="(() => DownloadFile(tool.Name))" Label="Download"></MatButton>
                            </div>
                        </div>
                    </div>
                    <p>@((MarkupString) @tool.MarkdownInfo)</p>    
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
            }
    </MatAccordion>
}

@code {
    private ToolResource[] tools;

@code {
}    

[Inject] BlazorDownloadFile.IBlazorDownloadFileService BlazorDownloadFileService { get; set; }
public async void DownloadFile(string toolName)
{
    var zipContent = await Http.GetByteArrayAsync($"tools/download/{toolName}/zip");
    await BlazorDownloadFileService.DownloadFile($"{toolName}.zip",zipContent);
}
    protected override async Task OnInitializedAsync()
    {
        tools = await Http.GetFromJsonAsync<ToolResource[]>("tools");
    }

}
