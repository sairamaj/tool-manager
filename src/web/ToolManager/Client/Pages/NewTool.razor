@page "/newtooldata"

@using System.ComponentModel.DataAnnotations
@using ToolManager.Shared
@using System.IO
@inject HttpClient Http


<EditForm Model="model" OnValidSubmit="Create">
    <DataAnnotationsValidator/>
     <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                <p>
                    <MatTextField Label="Name" @bind-Value="model.Name"/>
                    <ValidationMessage For="@(() => model.Name)"/>
                </p>
     </div>
     <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <p>
                    <MatTextField Label="Description" @bind-Value="model.Description"/>
                    <ValidationMessage For="@(() => model.Description)"/>
                </p>
     </div>
     <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <p>
                    <MatTextField Label="Tags" @bind-Value="model.Tags"/>
                    <ValidationMessage For="@(() => model.Tags)"/>
                </p>
     </div>
     <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <p>
                    <MatTextField Label="Source Url" @bind-Value="model.SourceUrl"/>
                    <ValidationMessage For="@(() => model.SourceUrl)"/>
                </p>
     </div>
     <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <p>
                    <span>ReadMe:</span>
                    <InputFile OnChange="HandleReadMeSelected"/>
                    @if (readMeFile != null){
                        <p>Name: @readMeFile.Name</p>
                    }
                </p>
     </div>
     <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <p>
                    <span>Zip file:</span>
                    <InputFile OnChange="HandleZipFileSelected"/>
                    @if (zipFile != null){
                        <p>Name: @zipFile.Name</p>
                    }
                </p>
     </div>
     <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <p>
                    <span>Screen shot:</span>
                    <InputFile OnChange="HandleScreenShotFileSelected"/>
                    @if (screenShotImageFile != null){
                        <p>Name: @screenShotImageFile.Name</p>
                    }
                </p>
     </div>

     <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                <MatButton Type="submit" Raised="true">Create</MatButton>
            </div>
</EditForm>

@code {
    IFileListEntry zipFile;
    IFileListEntry readMeFile;
    IFileListEntry screenShotImageFile;

    NewToolInfo model = new NewToolInfo();
    string status = "";
    void HandleZipFileSelected(IFileListEntry[] files)
    {
        zipFile = files.FirstOrDefault();
    }
    void HandleReadMeSelected(IFileListEntry[] files)
    {
        readMeFile = files.FirstOrDefault();
    }
    void HandleScreenShotFileSelected(IFileListEntry[] files)
    {
        screenShotImageFile = files.FirstOrDefault();
    }

    async Task Upload(IFileListEntry file)
    {
        // Just load into .NET memory to show it can be done
        // Alternatively it could be saved to disk, or parsed in memory, or similar
        var ms = new MemoryStream();
        await file.Data.CopyToAsync(ms);

        status = $"Finished loading {file.Size} bytes from {file.Name}";

        var content = new MultipartFormDataContent
    {
    { CreateContent(Path.GetExtension(file.Name),ms), "\"upload\"", file.Name }
    };
        await Http.PostAsync($"tools/upload/{model.Name}/{file.Name}", content);
    }

    HttpContent CreateContent(string extension, MemoryStream ms)
    {
        System.Console.WriteLine($"CreateContent :{extension}");
        switch (extension.ToUpperInvariant())
        {
            case ".MD":
                ms.Position = 0;
                var sr = new System.IO.StreamReader(ms);
                var data = sr.ReadToEnd();
                return new StringContent(data);

            default:
                return new ByteArrayContent(ms.GetBuffer());
        }
    }
    async Task Create()
    {
        System.Console.WriteLine("Creating new tool...");
        await Http.PostAsJsonAsync<NewToolInfo>("tools", model);
        if (this.zipFile != null)
        {
            await Upload(this.zipFile);
        }
        if (this.readMeFile != null)
        {
            await Upload(this.readMeFile);
        }
        if (this.screenShotImageFile != null)
        {
            await Upload(this.screenShotImageFile);
        }
    }
}